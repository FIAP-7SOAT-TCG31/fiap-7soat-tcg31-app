name: CI-CD app

on:
  push: 
    branches: ["feature/pipeline"]
  pull_request:
    branches: ["master", "develop"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Run tests
        run: mvn test

  build: 
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build Project
      run: mvn clean package

# Build and deploy docker image on AWS

  image-deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
    - name: Build Docker Image
      run:  docker build -t testimage:latest .

  # AWS CONFIGURE CREDENTIAL

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
    #     aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    #     aws-region: us-east-1

  #CHECK REPOSITORY EXIST / CREATE REPOSITORY

    # - name: Check Repository Exists
    #   id: check_repo
    #   run: |
    #     if aws ecr describe-repositories --repository-names testimage --region us-east-1; then
    #       echo "repo-exists=true" >> $GITHUB_ENV
    #     else
    #       echo "repo-exists=false" >> $GITHUB_ENV
    #     fi
    
    # - name: Create a Repository
    #   if: env.repo-exists == 'false'
    #   run: |
    #     aws ecr --region us-east-1 create-repository --repository-name testimage

  #PUSH IMAGE TO AWS ECR

    # - name: Login to ECR
    #   run: |
    #     aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

    # - name: Tag Docker Image
    #   run: |
    #     docker tag testimage:latest ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/testimage:testimage

    # - name: Docker push
    #   run: |
    #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/testimage:testimage

    - name: Image deploy
      run: echo 'deploy done successfully'

  cd-terraform-test:
    runs-on: ubuntu-latest
    needs: image-deploy
    if: github.ref == 'refs/heads/feature/pipeline'
    steps:
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init

    # - name: Terraform Plan
    #   run: |
    #     terraform plan \
    #       -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
    #       -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
    #       -var="aws_region=us-east-1"

    - name: Deploy success return
      run: echo 'Deploy success'

    