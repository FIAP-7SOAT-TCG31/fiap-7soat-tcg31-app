openapi: 3.0.1
info:
  title: FIAP Burger
  version: v1
servers:
  - url: http://localhost:7777/fiap-burger
    description: Generated server url
tags:
  - name: Get Order By Id Controller
    description: Controller for return order data by his id
  - name: Update Order Controller
    description: Controller for update order and save in database
  - name: Update Item Controller
    description: Controller for update item and save in database
  - name: Create Item Controller
    description: Controller for receiving item data and save it in the database
  - name: Search Order Controller
    description: Controller for return order data
  - name: Get Client By Document Controller
    description: Controller for return client data by his document number
  - name: Create Order Controller
    description: Controller for receiving order data and save it in the database
  - name: Create User Controller
    description: Controller for receiving user data and save it in the database
  - name: Get Client By Id Controller
    description: Controller for return client data by his id
  - name: Follow Up Controller
    description: Controller for follow up order with waiting time
  - name: Search Item Controller
    description: Controller for return item data
  - name: Generate Token Controller
    description: Controller for create access token for use in other routes
  - name: Pay Order Controller
    description: Controller for receive order payment
  - name: Create Client Controller
    description: Controller for receiving client data and save it in the database
  - name: Order Status Controller
    description: Controller for managing order status
  - name: Get Item By Id Controller
    description: Controller for return item data by his id
  - name: Confirm Order Controller
    description: Controller for confirm order and start payment flux
paths:
  /api/v1/items/{id}:
    get:
      tags:
        - Get Item By Id Controller
      summary: Return item data by his id
      operationId: getById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned item data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDto'
        '404':
          description: Item not found
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - Update Item Controller
      summary: Update Item
      operationId: updateItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateItemDto'
        required: true
      responses:
        '200':
          description: Receive updated item data and save it in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDto'
        '404':
          description: Item not found
          content:
            '*/*':
              schema:
                type: object
  /api/v1/users:
    post:
      tags:
        - Create User Controller
      summary: Create item data
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateUserDto'
        required: true
      responses:
        '201':
          description: Receive user data and save it in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
  /api/v1/orders:
    get:
      tags:
        - Search Order Controller
      summary: Return order data
      operationId: get
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: client_id
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          required: false
          schema:
            type: string
        - name: to
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned order data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseFollowupDto'
    post:
      tags:
        - Create Order Controller
      summary: Create order data
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateOrderDto'
        required: true
      responses:
        '201':
          description: Receive order data and save it in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
  /api/v1/orders/{id}/payment:
    post:
      tags:
        - Confirm Order Controller
      summary: Confirm order and start payment flux
      operationId: generatePayment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDto'
        required: true
      responses:
        '201':
          description: Successfully confirmed order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDto'
        '404':
          description: Order not found
          content:
            '*/*':
              schema:
                type: object
  /api/v1/items:
    get:
      tags:
        - Search Item Controller
      summary: Return item data
      operationId: search
      parameters:
        - name: itemType
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned items data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDto'
    post:
      tags:
        - Create Item Controller
      summary: Create item data
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateItemDto'
        required: true
      responses:
        '201':
          description: Receive item data and save it in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDto'
  /api/v1/clients:
    get:
      tags:
        - Get Client By Document Controller
      summary: Return client data by his document number
      operationId: get_3
      parameters:
        - name: cpf
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned client data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '404':
          description: Client not found
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - Create Client Controller
      summary: Create client
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientDto'
        required: true
      responses:
        '201':
          description: Receive client data and save it in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
  /api/v1/auth:
    post:
      tags:
        - Generate Token Controller
      summary: Generate access token
      operationId: create_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTokenDto'
        required: true
      responses:
        '200':
          description: Successfully token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenDto'
        '401':
          description: Unauthorized access
          content:
            '*/*':
              schema:
                type: object
  /api/v1/orders/{id}:
    get:
      tags:
        - Get Order By Id Controller
      summary: Return order data by his id
      operationId: get_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '404':
          description: Order not found
          content:
            '*/*':
              schema:
                type: object
    patch:
      tags:
        - Update Order Controller
      summary: Update Order
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateOrderDto'
        required: true
      responses:
        '200':
          description: Receive updated order data and save it in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '404':
          description: Order not found
          content:
            '*/*':
              schema:
                type: object
  /api/v1/orders/{id}/status:
    patch:
      tags:
        - Order Status Controller
      summary: Advance the status of an order
      operationId: create_5
      parameters:
        - name: id
          in: path
          description: The ID of the order to advance status
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully advanced the order status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseFollowupDto'
        '404':
          description: Order not found
          content:
            '*/*':
              schema:
                type: object
  /api/v1/orders/{id}/payment/{status}:
    patch:
      tags:
        - Pay Order Controller
      summary: Receive order payment status and update it in the database
      operationId: create_6
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order payment status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseFollowupDto'
        '204':
          description: Order cancelled
          content:
            '*/*':
              schema:
                type: object
        '404':
          description: Order not found
          content:
            '*/*':
              schema:
                type: object
  /api/v1/orders/{id}/combo:
    patch:
      tags:
        - Update Order Controller
      summary: Flag Order Item is Ready
      operationId: update_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateOrderDto'
        required: true
      responses:
        '200':
          description: Receive updated order data and save it in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '404':
          description: Order not found
          content:
            '*/*':
              schema:
                type: object
  /api/v1/followup:
    get:
      tags:
        - Follow Up Controller
      summary: Follow Up Orders
      operationId: get_2
      responses:
        '200':
          description: Return orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseFollowupDto'
  /api/v1/clients/{id}:
    get:
      tags:
        - Get Client By Id Controller
      summary: Return client data by his id
      operationId: get_4
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully returned client data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '404':
          description: Client not found
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    ItemDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        price:
          type: number
        quantity:
          type: number
          format: float
        description:
          type: string
        images:
          type: array
          items:
            type: string
        note:
          type: string
    RequestCreateItemDto:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ItemDto'
    RequestCreateUserDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
    UserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
    ClientDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cpf:
          type: string
        name:
          type: string
        email:
          type: string
    ComboDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemDto'
    RequestCreateOrderDto:
      type: object
      properties:
        combo:
          $ref: '#/components/schemas/ComboDto'
        requester:
          $ref: '#/components/schemas/ClientDto'
    OrderDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        requester:
          $ref: '#/components/schemas/ClientDto'
        combo:
          $ref: '#/components/schemas/ComboDto'
        requestedAt:
          type: string
        updatedAt:
          type: string
        amount:
          type: number
        status:
          type: string
        payment:
          $ref: '#/components/schemas/PaymentDto'
    PaymentDto:
      type: object
      properties:
        type:
          type: string
        client:
          $ref: '#/components/schemas/ClientDto'
        paid:
          type: boolean
        paidAt:
          type: string
        paymentDetails:
          type: object
          additionalProperties:
            type: object
    RequestTokenDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AccessTokenDto:
      type: object
      properties:
        token:
          type: string
    RequestUpdateOrderDto:
      type: object
      properties:
        combo:
          $ref: '#/components/schemas/ComboDto'
    ResponseFollowupDto:
      type: object
      properties:
        orderId:
          type: string
        amount:
          type: number
        status:
          type: string
        name:
          type: string
        waitingTime:
          type: string
